#usda 1.0
(
    defaultPrim = "obj"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Xform "obj" (
    kind = "component"
)
{
    def Mesh "mesh"
    {
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 3, 2]
        point3f[] points = [(-0.5, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)]
        color3f[] primvars:displayColor = [(0, 0, 0), (0, 0, 0), (1, 1, 1), (1, 1, 1)] (
            interpolation = "faceVarying"
        )
        normal3f[] primvars:normals = [(0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16)] (
            interpolation = "faceVarying"
        )
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (0, 1), (1, 1)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 3, 2]
        uniform token subdivisionScheme = "none"
    }

    def Mesh "mesh_varying_color"
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 5, 4, 1, 2, 6, 5, 2, 3, 7, 6, 4, 5, 9, 8, 5, 6, 10, 9, 6, 7, 11, 10, 8, 9, 13, 12, 9, 10, 14, 13, 10, 11, 15, 14]
        point3f[] points = [(-0.5, -1.110223e-16, 0.5), (-0.16666666, -1.110223e-16, 0.5), (0.16666669, -1.110223e-16, 0.5), (0.5, -1.110223e-16, 0.5), (-0.5, -3.7007432e-17, 0.16666666), (-0.16666666, -3.7007432e-17, 0.16666666), (0.16666669, -3.7007432e-17, 0.16666666), (0.5, -3.7007432e-17, 0.16666666), (-0.5, 3.700744e-17, -0.16666669), (-0.16666666, 3.700744e-17, -0.16666669), (0.16666669, 3.700744e-17, -0.16666669), (0.5, 3.700744e-17, -0.16666669), (-0.5, 1.110223e-16, -0.5), (-0.16666666, 1.110223e-16, -0.5), (0.16666669, 1.110223e-16, -0.5), (0.5, 1.110223e-16, -0.5)]
        color3f[] primvars:displayColor = [(0.80533963, 0.80533963, 0.80533963), (0.49330324, 0.49330324, 0.49330324), (0, 0, 0), (0, 0, 0), (0.9167123, 0.9167123, 0.9167123), (0.4739599, 0.4739599, 0.4739599), (0, 0, 0), (0, 0, 0), (1, 1, 1), (0.9877581, 0.9877581, 0.9877581), (0.8721956, 0.8721956, 0.8721956), (0, 0, 0), (0.77784026, 0.77784026, 0.77784026), (0.97788495, 0.97788495, 0.97788495), (0.9290754, 0.9290754, 0.9290754), (0.30249345, 0.30249345, 0.30249345)] (
            interpolation = "varying"
        )
        normal3f[] primvars:normals = [(0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16), (0, 1, 2.220446e-16)] (
            interpolation = "faceVarying"
        )
        texCoord2f[] primvars:st = [(0, 0), (0.33333334, 0), (0.6666667, 0), (1, 0), (0, 0.33333334), (0.33333334, 0.33333334), (0.6666667, 0.33333334), (1, 0.33333334), (0, 0.6666667), (0.33333334, 0.6666667), (0.6666667, 0.6666667), (1, 0.6666667), (0, 1), (0.33333334, 1), (0.6666667, 1), (1, 1)] (
            interpolation = "faceVarying"
        )
        int[] primvars:st:indices = [0, 1, 5, 4, 1, 2, 6, 5, 2, 3, 7, 6, 4, 5, 9, 8, 5, 6, 10, 9, 6, 7, 11, 10, 8, 9, 13, 12, 9, 10, 14, 13, 10, 11, 15, 14]
        uniform token subdivisionScheme = "none"
    }    

    def GenerativeProcedural "BifrostGraph" (
        prepend apiSchemas = ["HydraGenerativeProceduralAPI"]
    )
    {
        token primvars:hdGp:proceduralType = "BifrostGraph"
        token primvars:bifrost:graph = "Hydra::Testing::create_strands_from_input_mesh"
        prepend rel primvars:mesh = </obj/mesh_varying_color>
        string primvars:bifrost:output = "out_mesh"
    }
}

